package io.github.confuser2188.exploitguard.module.check;

import io.github.confuser2188.Magic;
import io.github.confuser2188.exploitguard.Main;
import io.github.confuser2188.exploitguard.module.Check;
import io.github.confuser2188.exploitguard.module.Module;
import io.github.confuser2188.packetlistener.FieldName;
import io.github.confuser2188.packetlistener.Reflection;
import io.github.confuser2188.packetlistener.event.ReceivedPacketEvent;
import io.github.confuser2188.packetlistener.minecraft.*;
import io.netty.buffer.ByteBuf;
import org.bukkit.Bukkit;
import org.bukkit.event.EventHandler;
import org.bukkit.inventory.meta.BookMeta;
import org.bukkit.inventory.meta.ItemMeta;

import java.util.ArrayList;
import java.util.Set;

public class ItemNBT extends Module{

    public ItemNBT() {
        super(Check.ITEM_NBT);
    }

    @EventHandler
    public void onPacketReceive(ReceivedPacketEvent event) {
        if (!this.isEnabled())
            return;

        try
        {
            ItemStack itemStack = null;

            switch(event.getPacketName())
            {
                case "PacketPlayInSetCreativeSlot":
                    itemStack = new ItemStack(Reflection.getFieldValue(event.getPacket(), "b"));
                    break;
                case "PacketPlayInWindowClick":
                    itemStack = new ItemStack(Reflection.getFieldValue(event.getPacket(), "item"));
                    break;
                case "PacketPlayInBlockPlace":
                    // ItemStack field removed in newer versions. So exploit is fixed
                    if(Main.getServerVersion().startsWith("v1_8"))
                        itemStack = new ItemStack(Reflection.getFieldValue(event.getPacket(), "d"));

                    // ItemStack is null when player sends this packet for an item in their hand
                    if(itemStack.getItemStackObject() == null){
                        ItemMeta bukkitItemMeta = event.getPlayer().getItemInHand().getItemMeta();
                        if(checkInvalidNBT(bukkitItemMeta))
                            violation(event);
                    }
                    break;
                case "PacketPlayInCustomPayload":
                    String channel = PayloadChannel.getChannel(event.getPacket());

                    if(channel.equals("MC|BSign") || channel.equals("MC|BEdit")){
                        PacketDataSerializer packetDataSerializer = new PacketDataSerializer(Reflection.getFieldValue(event.getPacket(), FieldName.PACKETDATASERIALIZER.getName()));

                        ByteBuf byteBuf = packetDataSerializer.getByteBuf().copy();

                        short short0 = packetDataSerializer.readShort();
                        if(short0 >= 0) {
                            packetDataSerializer.readByte();
                            packetDataSerializer.readShort();

                            NBTTagCompound nbtTagCompound = packetDataSerializer.getNBTTagCompound();
                            if(checkInvalidNBT(nbtTagCompound))
                                violation(event);
                        }

                        packetDataSerializer.setByteBuf(byteBuf);
                        if(event.isCancelled()) return;
                    }
                    break;
            }

            if(itemStack != null)
            {
                if(this.checkInvalidNBT(itemStack))
                    violation(event);
            }
        }catch(Exception ex) { ex.printStackTrace(); }
    }

    private boolean checkInvalidNBT(ItemStack itemStack) throws Exception{
        if (itemStack.getItemStackObject() == null || itemStack.getItem().getItem() == null) {
            return false;
        }

        NBTTagCompound tagCompound = new NBTTagCompound(itemStack.getItemStackObject());
        if(tagCompound.isValid()){
            // Item name length
            if(itemStack.getItem().getName() != null && itemStack.getItem().getName().length() > Magic.MAX_DISPLAYNAME_LENGTH)
                return true;

            // NBT Length
            ArrayList<String> keys = new ArrayList<>(tagCompound.getKeys());
            for(String key : keys){
                NBTBase nbtBase = tagCompound.get(key);
                if(nbtBase.toString().length() > Magic.MAX_NBT_LENGTH)
                    return true;
            }

            // Book NBT
            if(itemStack.getItem().getName() != null){
                String itemName = itemStack.getItem().getName();

                if (itemName.equals("book")
                        || itemName.equals("writingBook")
                        || itemName.equals("writtenBook")) {
                    return this.checkInvalidNBT(tagCompound);
                }
            }
        }
        return false;
    }

    private boolean checkInvalidNBT(NBTTagCompound tagCompound) throws Exception{
        if (tagCompound.isValid() && tagCompound.hasKey("pages")) {
            NBTTagList list = tagCompound.getList("pages", 8);

            // Whitelist for Essentials "/kit color" book
            //if (list.size() == 1 && list.getString(0).length() <= 1120) return false;

            if (list.size() > Magic.MAX_PAGE_COUNT)
                return true;
            else if (list.size() >= 1)
                for (int i = 0; i < list.size(); i++)
                    if (list.getString(i).length() > Magic.MAX_PAGE_LENGTH)
                        return true;
        }
        return false;
    }

    private boolean checkInvalidNBT(ItemMeta itemMeta) throws Exception{
        // Item name length
        if(itemMeta != null
                && itemMeta.hasDisplayName()
                && itemMeta.getDisplayName().length() > Magic.MAX_DISPLAYNAME_LENGTH)
            return true;

        // Book NBT
        if(itemMeta instanceof BookMeta){
            BookMeta bookMeta = (BookMeta) itemMeta;
            if (bookMeta.hasPages()) {
                if(bookMeta.getPageCount() > Magic.MAX_PAGE_COUNT)
                    return true;
                else if(bookMeta.getPageCount() >= 1)
                    for(int i = 0; i < bookMeta.getPageCount(); i++)
                        if(bookMeta.getPage(i + 1).length() > Magic.MAX_PAGE_LENGTH)
                            return true;
            }
        }
        return false;
    }
}
