package io.github.confuser2188.exploitguard.module.check;

import io.github.confuser2188.exploitguard.module.Check;
import io.github.confuser2188.exploitguard.module.Module;
import io.github.confuser2188.packetlistener_eg.Reflection;
import io.github.confuser2188.packetlistener_eg.event.ReceivedPacketEvent;
import io.github.confuser2188.packetlistener_eg.minecraft.BlockPosition;
import io.github.confuser2188.packetlistener_eg.minecraft.TileEntity;
import io.github.confuser2188.packetlistener_eg.minecraft.TileEntitySign;
import io.github.confuser2188.packetlistener_eg.minecraft.WorldServer;
import org.bukkit.event.EventHandler;

public class NonEditableSign extends Module{

    public NonEditableSign() {
        super(Check.NON_EDITABLE_SIGN);
    }

    @EventHandler
    public void onPacketReceive(ReceivedPacketEvent event) {
        if (!this.isEnabled() || !event.getPacketName().equals("PacketPlayInUpdateSign"))
            return;

        if(!event.getPlayer().isDead())
        {
            try {
                BlockPosition blockPos = new BlockPosition(Reflection.getFieldValue(event.getPacket(), "a"));
                WorldServer worldServer = new WorldServer(Reflection.getWorldServer(event.getPlayer().getWorld()));

                if(worldServer.isLoaded(blockPos))
                {
                    TileEntity tileEntity = worldServer.getTileEntity(blockPos);
                    if(tileEntity.getTileEntityObject().getClass().getSimpleName().equals("TileEntitySign"))
                    {
                        TileEntitySign tileEntitySign = new TileEntitySign(tileEntity.getTileEntityObject());
                        if(!tileEntitySign.isEditable())
                            violation(event);
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
}
